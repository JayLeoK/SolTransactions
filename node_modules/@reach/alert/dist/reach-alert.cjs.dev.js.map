{"version":3,"sources":["../src/reach-alert.tsx"],"sourcesContent":["/**\n * Welcome to @reach/alert!\n *\n * An alert is an element that displays a brief, important message in a way that\n * attracts the user's attention without interrupting the user's task.\n * Dynamically rendered alerts are automatically announced by most screen\n * readers, and in some operating systems, they may trigger an alert sound.\n *\n * The approach here is to allow developers to render a visual <Alert> and then\n * we mirror that to a couple of aria-live regions behind the scenes. This way,\n * most of the time, developers don't have to think about visual vs. aria\n * alerts.\n *\n * Limitations: Developers can't read from context inside of an Alert because\n * we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n * brand new React roots. We could use createPortal but then apps would need to\n * render the entire app tree in an <AlertProvider>, or maybe there's a way\n * with default context to do it, but we haven't explored that yet. So, we'll\n * see how this goes. If it becomes a problem we can introduce a portal later.\n *\n * @see Docs     https://reach.tech/alert\n * @see Source   https://github.com/reach/reach-ui/tree/main/packages/alert\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { VisuallyHidden } from \"@reach/visually-hidden\";\nimport { getOwnerDocument, useComposedRefs } from \"@reach/utils\";\nimport type * as Polymorphic from \"@reach/polymorphic\";\n\n/*\n * Singleton state is fine because you don't server render\n * an alert (SRs don't read them on first load anyway)\n */\nlet keys: RegionKeys = {\n\tpolite: -1,\n\tassertive: -1,\n};\n\nlet elements: ElementTypes = {\n\tpolite: {},\n\tassertive: {},\n};\n\nlet liveRegions: RegionElements = {\n\tpolite: null,\n\tassertive: null,\n};\n\nlet renderTimer: number | null;\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst AlertRendered = React.forwardRef(function AlertRendered(\n\t{ as: Comp = \"div\", children, ...props },\n\tforwardedRef\n) {\n\treturn (\n\t\t<Comp ref={forwardedRef} {...props}>\n\t\t\t{children}\n\t\t</Comp>\n\t);\n}) as Polymorphic.ForwardRefComponent<\"div\", Omit<AlertProps, \"type\">>;\n\n/**\n * Alert\n *\n * Screen-reader-friendly alert messages. In many apps developers add \"alert\"\n * messages when network events or other things happen. Users with assistive\n * technologies may not know about the message unless you develop for it.\n *\n * @see Docs https://reach.tech/alert\n */\nconst Alert = React.forwardRef(function Alert(props, forwardedRef) {\n\tlet ownRef = React.useRef<HTMLDivElement>(null);\n\tlet ref = useComposedRefs(forwardedRef, ownRef);\n\tuseMirrorEffects(ownRef, props);\n\tlet { type: _, ...rest } = props;\n\treturn <AlertRendered ref={ref} {...rest} data-reach-alert=\"\" aria-hidden />;\n}) as Polymorphic.ForwardRefComponent<\"div\", AlertProps>;\n\n/**\n * @see Docs https://reach.tech/alert#alert-props\n */\ninterface AlertProps {\n\t/**\n\t * Controls whether the assistive technology should read immediately\n\t * (\"assertive\") or wait until the user is idle (\"polite\").\n\t *\n\t * @see Docs https://reach.tech/alert#alert-type\n\t */\n\ttype?: \"assertive\" | \"polite\";\n\tchildren: React.ReactNode;\n}\n\nAlert.displayName = \"Alert\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction createMirror(type: \"polite\" | \"assertive\", doc: Document): Mirror {\n\tlet key = ++keys[type];\n\n\tlet mount = (element: JSX.Element) => {\n\t\tif (liveRegions[type]) {\n\t\t\telements[type][key] = element;\n\t\t\trenderAlerts();\n\t\t} else {\n\t\t\tlet node = doc.createElement(\"div\");\n\t\t\tnode.setAttribute(`data-reach-live-${type}`, \"true\");\n\t\t\tliveRegions[type] = node;\n\t\t\tdoc.body.appendChild(liveRegions[type]!);\n\t\t\tmount(element);\n\t\t}\n\t};\n\n\tlet update = (element: JSX.Element) => {\n\t\telements[type][key] = element;\n\t\trenderAlerts();\n\t};\n\n\tlet unmount = () => {\n\t\tdelete elements[type][key];\n\t\trenderAlerts();\n\t};\n\n\treturn { mount, update, unmount };\n}\n\nfunction renderAlerts() {\n\tif (renderTimer != null) {\n\t\twindow.clearTimeout(renderTimer);\n\t}\n\trenderTimer = window.setTimeout(() => {\n\t\tObject.keys(elements).forEach((elementType) => {\n\t\t\tlet regionType: RegionTypes = elementType as RegionTypes;\n\t\t\tlet container = liveRegions[regionType]!;\n\t\t\tif (container) {\n\t\t\t\tReactDOM.render(\n\t\t\t\t\t<VisuallyHidden as=\"div\">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t// The status role is a type of live region and a container whose\n\t\t\t\t\t\t\t// content is advisory information for the user that is not\n\t\t\t\t\t\t\t// important enough to justify an alert, and is often presented as\n\t\t\t\t\t\t\t// a status bar. When the role is added to an element, the browser\n\t\t\t\t\t\t\t// will send out an accessible status event to assistive\n\t\t\t\t\t\t\t// technology products which can then notify the user about it.\n\t\t\t\t\t\t\t// https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_status_role\n\t\t\t\t\t\t\trole={regionType === \"assertive\" ? \"alert\" : \"status\"}\n\t\t\t\t\t\t\taria-live={regionType}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{Object.keys(elements[regionType]).map((key) =>\n\t\t\t\t\t\t\t\tReact.cloneElement(elements[regionType][key], {\n\t\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\t\tref: null,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</VisuallyHidden>,\n\t\t\t\t\tliveRegions[regionType]\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}, 500);\n}\n\nfunction useMirrorEffects(\n\tref: React.RefObject<Element>,\n\t{\n\t\ttype: regionType = \"polite\",\n\t\t...props\n\t}: React.ComponentPropsWithoutRef<\"div\"> & AlertProps\n) {\n\tlet mirror = React.useRef<Mirror | null>(null);\n\tReact.useEffect(() => {\n\t\tlet ownerDocument = getOwnerDocument(ref.current);\n\t\tif (!ownerDocument) return;\n\t\tmirror.current = createMirror(regionType, ownerDocument);\n\t\tmirror.current.mount(<AlertRendered {...props} />);\n\t\treturn () => {\n\t\t\tmirror.current?.unmount();\n\t\t};\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [ref, regionType, ...Object.values(props)]);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ninterface Mirror {\n\tmount(element: JSX.Element): void;\n\tupdate(element: JSX.Element): void;\n\tunmount(): void;\n}\n\ntype RegionTypes = \"polite\" | \"assertive\";\n\ntype ElementTypes = {\n\t[key in RegionTypes]: {\n\t\t[key: string]: JSX.Element;\n\t};\n};\n\ntype RegionElements<T extends HTMLElement = HTMLDivElement> = {\n\t[key in RegionTypes]: T | null;\n};\n\ntype RegionKeys = {\n\t[key in RegionTypes]: number;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { AlertProps };\nexport { Alert };\n"],"mappings":"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","names":[]}