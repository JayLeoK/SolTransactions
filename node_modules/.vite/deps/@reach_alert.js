import {
  getOwnerDocument,
  useComposedRefs
} from "./chunk-JV3HA7EM.js";
import {
  VisuallyHidden
} from "./chunk-BXSLI7KW.js";
import {
  require_react_dom
} from "./chunk-JBMCIF3W.js";
import {
  require_react
} from "./chunk-BCT7PDEY.js";
import {
  __toESM
} from "./chunk-JZQ37OGZ.js";

// node_modules/@reach/alert/dist/reach-alert.mjs
var React = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var keys = {
  polite: -1,
  assertive: -1
};
var elements = {
  polite: {},
  assertive: {}
};
var liveRegions = {
  polite: null,
  assertive: null
};
var renderTimer;
var AlertRendered = React.forwardRef(function AlertRendered2({ as: Comp = "div", children, ...props }, forwardedRef) {
  return React.createElement(Comp, {
    ref: forwardedRef,
    ...props
  }, children);
});
var Alert = React.forwardRef(function Alert2(props, forwardedRef) {
  let ownRef = React.useRef(null);
  let ref = useComposedRefs(forwardedRef, ownRef);
  useMirrorEffects(ownRef, props);
  let { type: _, ...rest } = props;
  return React.createElement(AlertRendered, {
    ref,
    ...rest,
    "data-reach-alert": "",
    "aria-hidden": true
  });
});
Alert.displayName = "Alert";
function createMirror(type, doc) {
  let key = ++keys[type];
  let mount = (element) => {
    if (liveRegions[type]) {
      elements[type][key] = element;
      renderAlerts();
    } else {
      let node = doc.createElement("div");
      node.setAttribute(`data-reach-live-${type}`, "true");
      liveRegions[type] = node;
      doc.body.appendChild(liveRegions[type]);
      mount(element);
    }
  };
  let update = (element) => {
    elements[type][key] = element;
    renderAlerts();
  };
  let unmount = () => {
    delete elements[type][key];
    renderAlerts();
  };
  return { mount, update, unmount };
}
function renderAlerts() {
  if (renderTimer != null) {
    window.clearTimeout(renderTimer);
  }
  renderTimer = window.setTimeout(() => {
    Object.keys(elements).forEach((elementType) => {
      let regionType = elementType;
      let container = liveRegions[regionType];
      if (container) {
        ReactDOM.render(React.createElement(VisuallyHidden, {
          as: "div"
        }, React.createElement("div", {
          role: regionType === "assertive" ? "alert" : "status",
          "aria-live": regionType
        }, Object.keys(elements[regionType]).map((key) => React.cloneElement(elements[regionType][key], {
          key,
          ref: null
        })))), liveRegions[regionType]);
      }
    });
  }, 500);
}
function useMirrorEffects(ref, {
  type: regionType = "polite",
  ...props
}) {
  let mirror = React.useRef(null);
  React.useEffect(() => {
    let ownerDocument = getOwnerDocument(ref.current);
    if (!ownerDocument)
      return;
    mirror.current = createMirror(regionType, ownerDocument);
    mirror.current.mount(React.createElement(AlertRendered, {
      ...props
    }));
    return () => {
      var _a;
      (_a = mirror.current) == null ? void 0 : _a.unmount();
    };
  }, [ref, regionType, ...Object.values(props)]);
}
export {
  Alert
};
/*! Bundled license information:

@reach/alert/dist/reach-alert.mjs:
  (**
    * @reach/alert v0.18.0
    *
    * Copyright (c) 2018-2022, React Training LLC
    *
    * This source code is licensed under the MIT license found in the
    * LICENSE.md file in the root directory of this source tree.
    *
    * @license MIT
    *)
*/
//# sourceMappingURL=@reach_alert.js.map
